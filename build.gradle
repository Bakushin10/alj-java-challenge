/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
	id 'org.springframework.boot' version '2.5.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = "$serviceGroupId"
version = "$serviceVersion"
sourceCompatibility = '1.11'
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:2.1.4.RELEASE")
    implementation("org.springframework.boot:spring-boot-starter-web:2.1.4.RELEASE")
	implementation('org.springframework.boot:spring-boot-starter-redis:1.4.7.RELEASE')
	implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	runtimeOnly 'org.postgresql:postgresql'
    compileOnly("org.projectlombok:lombok:1.18.0")
	annotationProcessor 'org.projectlombok:lombok'
	implementation("io.springfox:springfox-swagger2:2.7.0")
	implementation("io.springfox:springfox-swagger-ui:2.7.0")
	testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
	testImplementation ('org.springframework.boot:spring-boot-starter-test'){
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

group = "jp.co.axa"
version = "0.0.1-SNAPSHOT"
description = "api-demo"
java.sourceCompatibility = JavaVersion.VERSION_11

sourceSets {
	componentTest {
		java.srcDir "$projectDir/src/componentTest/java"
		resources.srcDir "$projectDir/src/componentTest/resources"
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

configurations {
	downloadDependenciesConfig.extendsFrom implementation, testImplementation, testRuntime
	componentTestImplementation.extendsFrom testImplementation
	componentTestRuntime.extendsFrom testRuntime
}

/***
 *
 * Task definitions
 *
 */

// run the componentTest/** tests
task componentTest(type: Test) {
	description = 'Runs component tests'
	group = 'verification'
	testClassesDirs = sourceSets.componentTest.output.classesDirs
	classpath = sourceSets.componentTest.runtimeClasspath
	outputs.upToDateWhen { false }
}

task composeUp(type: Exec) {
	// dependsOn buildDockerimage
	workingDir "$projectDir"
	//environment << [ SERVICE_TAG: "$serviceVersion", SERVICE_GROUP: "$serviceGroupId", SERVICE_NAME: "$serviceApplicationName", SPRING_PROFILE: "docker" ]
	commandLine 'docker-compose', 'up', '-d'
}

task composeDependenciesUp(type: Exec) {
	workingDir "$projectDir"
	commandLine 'docker-compose', '-f', 'docker-compose.yml', 'up', '-d'
}

task composeDown(type: Exec) {
	workingDir "$projectDir"
	commandLine 'docker-compose', 'down', '-t', '60', '-v'
}

task waitForAXAJavaService {
	doLast {
		def responseCode = null

		while(responseCode != 200) {
			sleep 1000
			try {
				def req = "http://localhost:8080/api/v1/health".toURL().openConnection()
				responseCode = req.getResponseCode()
				logger.log(LogLevel.INFO, "Response returned from service $responseCode")
			}
			catch(Exception) {
				logger.log(LogLevel.INFO, "Failed to connect to service")
			}
		}
	}
}

task componentTestDocker {
	dependsOn componentTestClasses, composeUp, waitForAXAJavaService
	doLast {
		componentTest.executeTests()
	}
	finalizedBy composeDown
}

// print tests out to console as they run
def testLogging = {
	afterTest { desc, result ->
		logger.quiet "Test ${desc.name} [${desc.className}] with result: ${result.resultType}"
	}
}

test {
	configure testLogging
	useJUnitPlatform()
}

componentTest {
	configure testLogging
	useJUnitPlatform()
}
